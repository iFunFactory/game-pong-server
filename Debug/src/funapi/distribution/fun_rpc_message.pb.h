// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: funapi/distribution/fun_rpc_message.proto

#ifndef PROTOBUF_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto__INCLUDED
#define PROTOBUF_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto();
void protobuf_AssignDesc_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto();
void protobuf_ShutdownFile_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto();

class FunRpcMessage;
class FunRpcErrorMessage;
class FunRpcPingMessage;
class FunRpcObjectMessage;

// ===================================================================

class FunRpcMessage : public ::google::protobuf::Message {
 public:
  FunRpcMessage();
  virtual ~FunRpcMessage();

  FunRpcMessage(const FunRpcMessage& from);

  inline FunRpcMessage& operator=(const FunRpcMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FunRpcMessage& default_instance();

  void Swap(FunRpcMessage* other);

  // implements Message ----------------------------------------------

  FunRpcMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FunRpcMessage& from);
  void MergeFrom(const FunRpcMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes sender = 1;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 1;
  inline const ::std::string& sender() const;
  inline void set_sender(const ::std::string& value);
  inline void set_sender(const char* value);
  inline void set_sender(const void* value, size_t size);
  inline ::std::string* mutable_sender();
  inline ::std::string* release_sender();
  inline void set_allocated_sender(::std::string* sender);

  // required bytes xid = 2;
  inline bool has_xid() const;
  inline void clear_xid();
  static const int kXidFieldNumber = 2;
  inline const ::std::string& xid() const;
  inline void set_xid(const ::std::string& value);
  inline void set_xid(const char* value);
  inline void set_xid(const void* value, size_t size);
  inline ::std::string* mutable_xid();
  inline ::std::string* release_xid();
  inline void set_allocated_xid(::std::string* xid);

  // required string type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(FunRpcMessage)
  // @@protoc_insertion_point(class_scope:FunRpcMessage)
 private:
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_xid();
  inline void clear_has_xid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sender_;
  ::std::string* xid_;
  ::std::string* type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto();
  friend void protobuf_AssignDesc_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static FunRpcMessage* default_instance_;
};
// -------------------------------------------------------------------

class FunRpcErrorMessage : public ::google::protobuf::Message {
 public:
  FunRpcErrorMessage();
  virtual ~FunRpcErrorMessage();

  FunRpcErrorMessage(const FunRpcErrorMessage& from);

  inline FunRpcErrorMessage& operator=(const FunRpcErrorMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FunRpcErrorMessage& default_instance();

  void Swap(FunRpcErrorMessage* other);

  // implements Message ----------------------------------------------

  FunRpcErrorMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FunRpcErrorMessage& from);
  void MergeFrom(const FunRpcErrorMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string what = 1;
  inline bool has_what() const;
  inline void clear_what();
  static const int kWhatFieldNumber = 1;
  inline const ::std::string& what() const;
  inline void set_what(const ::std::string& value);
  inline void set_what(const char* value);
  inline void set_what(const char* value, size_t size);
  inline ::std::string* mutable_what();
  inline ::std::string* release_what();
  inline void set_allocated_what(::std::string* what);

  // @@protoc_insertion_point(class_scope:FunRpcErrorMessage)
 private:
  inline void set_has_what();
  inline void clear_has_what();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* what_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto();
  friend void protobuf_AssignDesc_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static FunRpcErrorMessage* default_instance_;
};
// -------------------------------------------------------------------

class FunRpcPingMessage : public ::google::protobuf::Message {
 public:
  FunRpcPingMessage();
  virtual ~FunRpcPingMessage();

  FunRpcPingMessage(const FunRpcPingMessage& from);

  inline FunRpcPingMessage& operator=(const FunRpcPingMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FunRpcPingMessage& default_instance();

  void Swap(FunRpcPingMessage* other);

  // implements Message ----------------------------------------------

  FunRpcPingMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FunRpcPingMessage& from);
  void MergeFrom(const FunRpcPingMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string text = 1;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 1;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:FunRpcPingMessage)
 private:
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* text_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto();
  friend void protobuf_AssignDesc_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static FunRpcPingMessage* default_instance_;
};
// -------------------------------------------------------------------

class FunRpcObjectMessage : public ::google::protobuf::Message {
 public:
  FunRpcObjectMessage();
  virtual ~FunRpcObjectMessage();

  FunRpcObjectMessage(const FunRpcObjectMessage& from);

  inline FunRpcObjectMessage& operator=(const FunRpcObjectMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FunRpcObjectMessage& default_instance();

  void Swap(FunRpcObjectMessage* other);

  // implements Message ----------------------------------------------

  FunRpcObjectMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FunRpcObjectMessage& from);
  void MergeFrom(const FunRpcObjectMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:FunRpcObjectMessage)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto();
  friend void protobuf_AssignDesc_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static FunRpcObjectMessage* default_instance_;
};
// ===================================================================

static const int kErrorFieldNumber = 8;
extern ::google::protobuf::internal::ExtensionIdentifier< ::FunRpcMessage,
    ::google::protobuf::internal::MessageTypeTraits< ::FunRpcErrorMessage >, 11, false >
  error;
static const int kPingFieldNumber = 9;
extern ::google::protobuf::internal::ExtensionIdentifier< ::FunRpcMessage,
    ::google::protobuf::internal::MessageTypeTraits< ::FunRpcPingMessage >, 11, false >
  ping;

// ===================================================================

// FunRpcMessage

// required bytes sender = 1;
inline bool FunRpcMessage::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FunRpcMessage::set_has_sender() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FunRpcMessage::clear_has_sender() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FunRpcMessage::clear_sender() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    sender_->clear();
  }
  clear_has_sender();
}
inline const ::std::string& FunRpcMessage::sender() const {
  return *sender_;
}
inline void FunRpcMessage::set_sender(const ::std::string& value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
}
inline void FunRpcMessage::set_sender(const char* value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
}
inline void FunRpcMessage::set_sender(const void* value, size_t size) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FunRpcMessage::mutable_sender() {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  return sender_;
}
inline ::std::string* FunRpcMessage::release_sender() {
  clear_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sender_;
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FunRpcMessage::set_allocated_sender(::std::string* sender) {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (sender) {
    set_has_sender();
    sender_ = sender;
  } else {
    clear_has_sender();
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes xid = 2;
inline bool FunRpcMessage::has_xid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FunRpcMessage::set_has_xid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FunRpcMessage::clear_has_xid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FunRpcMessage::clear_xid() {
  if (xid_ != &::google::protobuf::internal::kEmptyString) {
    xid_->clear();
  }
  clear_has_xid();
}
inline const ::std::string& FunRpcMessage::xid() const {
  return *xid_;
}
inline void FunRpcMessage::set_xid(const ::std::string& value) {
  set_has_xid();
  if (xid_ == &::google::protobuf::internal::kEmptyString) {
    xid_ = new ::std::string;
  }
  xid_->assign(value);
}
inline void FunRpcMessage::set_xid(const char* value) {
  set_has_xid();
  if (xid_ == &::google::protobuf::internal::kEmptyString) {
    xid_ = new ::std::string;
  }
  xid_->assign(value);
}
inline void FunRpcMessage::set_xid(const void* value, size_t size) {
  set_has_xid();
  if (xid_ == &::google::protobuf::internal::kEmptyString) {
    xid_ = new ::std::string;
  }
  xid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FunRpcMessage::mutable_xid() {
  set_has_xid();
  if (xid_ == &::google::protobuf::internal::kEmptyString) {
    xid_ = new ::std::string;
  }
  return xid_;
}
inline ::std::string* FunRpcMessage::release_xid() {
  clear_has_xid();
  if (xid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xid_;
    xid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FunRpcMessage::set_allocated_xid(::std::string* xid) {
  if (xid_ != &::google::protobuf::internal::kEmptyString) {
    delete xid_;
  }
  if (xid) {
    set_has_xid();
    xid_ = xid;
  } else {
    clear_has_xid();
    xid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string type = 3;
inline bool FunRpcMessage::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FunRpcMessage::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FunRpcMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FunRpcMessage::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& FunRpcMessage::type() const {
  return *type_;
}
inline void FunRpcMessage::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void FunRpcMessage::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void FunRpcMessage::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FunRpcMessage::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* FunRpcMessage::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FunRpcMessage::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FunRpcErrorMessage

// required string what = 1;
inline bool FunRpcErrorMessage::has_what() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FunRpcErrorMessage::set_has_what() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FunRpcErrorMessage::clear_has_what() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FunRpcErrorMessage::clear_what() {
  if (what_ != &::google::protobuf::internal::kEmptyString) {
    what_->clear();
  }
  clear_has_what();
}
inline const ::std::string& FunRpcErrorMessage::what() const {
  return *what_;
}
inline void FunRpcErrorMessage::set_what(const ::std::string& value) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  what_->assign(value);
}
inline void FunRpcErrorMessage::set_what(const char* value) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  what_->assign(value);
}
inline void FunRpcErrorMessage::set_what(const char* value, size_t size) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  what_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FunRpcErrorMessage::mutable_what() {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  return what_;
}
inline ::std::string* FunRpcErrorMessage::release_what() {
  clear_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = what_;
    what_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FunRpcErrorMessage::set_allocated_what(::std::string* what) {
  if (what_ != &::google::protobuf::internal::kEmptyString) {
    delete what_;
  }
  if (what) {
    set_has_what();
    what_ = what;
  } else {
    clear_has_what();
    what_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FunRpcPingMessage

// required string text = 1;
inline bool FunRpcPingMessage::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FunRpcPingMessage::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FunRpcPingMessage::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FunRpcPingMessage::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& FunRpcPingMessage::text() const {
  return *text_;
}
inline void FunRpcPingMessage::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void FunRpcPingMessage::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void FunRpcPingMessage::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FunRpcPingMessage::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* FunRpcPingMessage::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FunRpcPingMessage::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FunRpcObjectMessage


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto__INCLUDED
