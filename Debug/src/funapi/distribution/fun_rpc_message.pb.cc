// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: funapi/distribution/fun_rpc_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "funapi/distribution/fun_rpc_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* FunRpcMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunRpcMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunRpcErrorMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunRpcErrorMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunRpcPingMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunRpcPingMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunRpcObjectMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunRpcObjectMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto() {
  protobuf_AddDesc_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "funapi/distribution/fun_rpc_message.proto");
  GOOGLE_CHECK(file != NULL);
  FunRpcMessage_descriptor_ = file->message_type(0);
  static const int FunRpcMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRpcMessage, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRpcMessage, xid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRpcMessage, type_),
  };
  FunRpcMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunRpcMessage_descriptor_,
      FunRpcMessage::default_instance_,
      FunRpcMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRpcMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRpcMessage, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRpcMessage, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunRpcMessage));
  FunRpcErrorMessage_descriptor_ = file->message_type(1);
  static const int FunRpcErrorMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRpcErrorMessage, what_),
  };
  FunRpcErrorMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunRpcErrorMessage_descriptor_,
      FunRpcErrorMessage::default_instance_,
      FunRpcErrorMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRpcErrorMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRpcErrorMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunRpcErrorMessage));
  FunRpcPingMessage_descriptor_ = file->message_type(2);
  static const int FunRpcPingMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRpcPingMessage, text_),
  };
  FunRpcPingMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunRpcPingMessage_descriptor_,
      FunRpcPingMessage::default_instance_,
      FunRpcPingMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRpcPingMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRpcPingMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunRpcPingMessage));
  FunRpcObjectMessage_descriptor_ = file->message_type(3);
  static const int FunRpcObjectMessage_offsets_[1] = {
  };
  FunRpcObjectMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunRpcObjectMessage_descriptor_,
      FunRpcObjectMessage::default_instance_,
      FunRpcObjectMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRpcObjectMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunRpcObjectMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunRpcObjectMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunRpcMessage_descriptor_, &FunRpcMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunRpcErrorMessage_descriptor_, &FunRpcErrorMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunRpcPingMessage_descriptor_, &FunRpcPingMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunRpcObjectMessage_descriptor_, &FunRpcObjectMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto() {
  delete FunRpcMessage::default_instance_;
  delete FunRpcMessage_reflection_;
  delete FunRpcErrorMessage::default_instance_;
  delete FunRpcErrorMessage_reflection_;
  delete FunRpcPingMessage::default_instance_;
  delete FunRpcPingMessage_reflection_;
  delete FunRpcObjectMessage::default_instance_;
  delete FunRpcObjectMessage_reflection_;
}

void protobuf_AddDesc_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n)funapi/distribution/fun_rpc_message.pr"
    "oto\"D\n\rFunRpcMessage\022\016\n\006sender\030\001 \002(\014\022\013\n\003"
    "xid\030\002 \002(\014\022\014\n\004type\030\003 \002(\t*\010\010\010\020\200\200\200\200\002\"\"\n\022Fun"
    "RpcErrorMessage\022\014\n\004what\030\001 \002(\t\"!\n\021FunRpcP"
    "ingMessage\022\014\n\004text\030\001 \002(\t\"\025\n\023FunRpcObject"
    "Message:2\n\005error\022\016.FunRpcMessage\030\010 \001(\0132\023"
    ".FunRpcErrorMessage:0\n\004ping\022\016.FunRpcMess"
    "age\030\t \001(\0132\022.FunRpcPingMessage", 309);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "funapi/distribution/fun_rpc_message.proto", &protobuf_RegisterTypes);
  FunRpcMessage::default_instance_ = new FunRpcMessage();
  FunRpcErrorMessage::default_instance_ = new FunRpcErrorMessage();
  FunRpcPingMessage::default_instance_ = new FunRpcPingMessage();
  FunRpcObjectMessage::default_instance_ = new FunRpcObjectMessage();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::FunRpcMessage::default_instance(),
    8, 11, false, false,
    &::FunRpcErrorMessage::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::FunRpcMessage::default_instance(),
    9, 11, false, false,
    &::FunRpcPingMessage::default_instance());
  FunRpcMessage::default_instance_->InitAsDefaultInstance();
  FunRpcErrorMessage::default_instance_->InitAsDefaultInstance();
  FunRpcPingMessage::default_instance_->InitAsDefaultInstance();
  FunRpcObjectMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto {
  StaticDescriptorInitializer_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto() {
    protobuf_AddDesc_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto();
  }
} static_descriptor_initializer_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FunRpcMessage::kSenderFieldNumber;
const int FunRpcMessage::kXidFieldNumber;
const int FunRpcMessage::kTypeFieldNumber;
#endif  // !_MSC_VER

FunRpcMessage::FunRpcMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunRpcMessage::InitAsDefaultInstance() {
}

FunRpcMessage::FunRpcMessage(const FunRpcMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunRpcMessage::SharedCtor() {
  _cached_size_ = 0;
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunRpcMessage::~FunRpcMessage() {
  SharedDtor();
}

void FunRpcMessage::SharedDtor() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (xid_ != &::google::protobuf::internal::kEmptyString) {
    delete xid_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void FunRpcMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunRpcMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunRpcMessage_descriptor_;
}

const FunRpcMessage& FunRpcMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto();
  return *default_instance_;
}

FunRpcMessage* FunRpcMessage::default_instance_ = NULL;

FunRpcMessage* FunRpcMessage::New() const {
  return new FunRpcMessage;
}

void FunRpcMessage::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::kEmptyString) {
        sender_->clear();
      }
    }
    if (has_xid()) {
      if (xid_ != &::google::protobuf::internal::kEmptyString) {
        xid_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunRpcMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes sender = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_xid;
        break;
      }

      // required bytes xid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_xid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // required string type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((64u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunRpcMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->sender(), output);
  }

  // required bytes xid = 2;
  if (has_xid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->xid(), output);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->type(), output);
  }

  // Extension range [8, 536870912)
  _extensions_.SerializeWithCachedSizes(
      8, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunRpcMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes sender = 1;
  if (has_sender()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->sender(), target);
  }

  // required bytes xid = 2;
  if (has_xid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->xid(), target);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // Extension range [8, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      8, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunRpcMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes sender = 1;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sender());
    }

    // required bytes xid = 2;
    if (has_xid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->xid());
    }

    // required string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunRpcMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunRpcMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunRpcMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunRpcMessage::MergeFrom(const FunRpcMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_xid()) {
      set_xid(from.xid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunRpcMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunRpcMessage::CopyFrom(const FunRpcMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunRpcMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void FunRpcMessage::Swap(FunRpcMessage* other) {
  if (other != this) {
    std::swap(sender_, other->sender_);
    std::swap(xid_, other->xid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata FunRpcMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunRpcMessage_descriptor_;
  metadata.reflection = FunRpcMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunRpcErrorMessage::kWhatFieldNumber;
#endif  // !_MSC_VER

FunRpcErrorMessage::FunRpcErrorMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunRpcErrorMessage::InitAsDefaultInstance() {
}

FunRpcErrorMessage::FunRpcErrorMessage(const FunRpcErrorMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunRpcErrorMessage::SharedCtor() {
  _cached_size_ = 0;
  what_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunRpcErrorMessage::~FunRpcErrorMessage() {
  SharedDtor();
}

void FunRpcErrorMessage::SharedDtor() {
  if (what_ != &::google::protobuf::internal::kEmptyString) {
    delete what_;
  }
  if (this != default_instance_) {
  }
}

void FunRpcErrorMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunRpcErrorMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunRpcErrorMessage_descriptor_;
}

const FunRpcErrorMessage& FunRpcErrorMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto();
  return *default_instance_;
}

FunRpcErrorMessage* FunRpcErrorMessage::default_instance_ = NULL;

FunRpcErrorMessage* FunRpcErrorMessage::New() const {
  return new FunRpcErrorMessage;
}

void FunRpcErrorMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_what()) {
      if (what_ != &::google::protobuf::internal::kEmptyString) {
        what_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunRpcErrorMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string what = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_what()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->what().data(), this->what().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunRpcErrorMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string what = 1;
  if (has_what()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->what().data(), this->what().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->what(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunRpcErrorMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string what = 1;
  if (has_what()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->what().data(), this->what().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->what(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunRpcErrorMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string what = 1;
    if (has_what()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->what());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunRpcErrorMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunRpcErrorMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunRpcErrorMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunRpcErrorMessage::MergeFrom(const FunRpcErrorMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_what()) {
      set_what(from.what());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunRpcErrorMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunRpcErrorMessage::CopyFrom(const FunRpcErrorMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunRpcErrorMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FunRpcErrorMessage::Swap(FunRpcErrorMessage* other) {
  if (other != this) {
    std::swap(what_, other->what_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunRpcErrorMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunRpcErrorMessage_descriptor_;
  metadata.reflection = FunRpcErrorMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunRpcPingMessage::kTextFieldNumber;
#endif  // !_MSC_VER

FunRpcPingMessage::FunRpcPingMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunRpcPingMessage::InitAsDefaultInstance() {
}

FunRpcPingMessage::FunRpcPingMessage(const FunRpcPingMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunRpcPingMessage::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunRpcPingMessage::~FunRpcPingMessage() {
  SharedDtor();
}

void FunRpcPingMessage::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void FunRpcPingMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunRpcPingMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunRpcPingMessage_descriptor_;
}

const FunRpcPingMessage& FunRpcPingMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto();
  return *default_instance_;
}

FunRpcPingMessage* FunRpcPingMessage::default_instance_ = NULL;

FunRpcPingMessage* FunRpcPingMessage::New() const {
  return new FunRpcPingMessage;
}

void FunRpcPingMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunRpcPingMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunRpcPingMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunRpcPingMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunRpcPingMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunRpcPingMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunRpcPingMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunRpcPingMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunRpcPingMessage::MergeFrom(const FunRpcPingMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunRpcPingMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunRpcPingMessage::CopyFrom(const FunRpcPingMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunRpcPingMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FunRpcPingMessage::Swap(FunRpcPingMessage* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunRpcPingMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunRpcPingMessage_descriptor_;
  metadata.reflection = FunRpcPingMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FunRpcObjectMessage::FunRpcObjectMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunRpcObjectMessage::InitAsDefaultInstance() {
}

FunRpcObjectMessage::FunRpcObjectMessage(const FunRpcObjectMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunRpcObjectMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunRpcObjectMessage::~FunRpcObjectMessage() {
  SharedDtor();
}

void FunRpcObjectMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FunRpcObjectMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunRpcObjectMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunRpcObjectMessage_descriptor_;
}

const FunRpcObjectMessage& FunRpcObjectMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_funapi_2fdistribution_2ffun_5frpc_5fmessage_2eproto();
  return *default_instance_;
}

FunRpcObjectMessage* FunRpcObjectMessage::default_instance_ = NULL;

FunRpcObjectMessage* FunRpcObjectMessage::New() const {
  return new FunRpcObjectMessage;
}

void FunRpcObjectMessage::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunRpcObjectMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FunRpcObjectMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunRpcObjectMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunRpcObjectMessage::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunRpcObjectMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunRpcObjectMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunRpcObjectMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunRpcObjectMessage::MergeFrom(const FunRpcObjectMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunRpcObjectMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunRpcObjectMessage::CopyFrom(const FunRpcObjectMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunRpcObjectMessage::IsInitialized() const {

  return true;
}

void FunRpcObjectMessage::Swap(FunRpcObjectMessage* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunRpcObjectMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunRpcObjectMessage_descriptor_;
  metadata.reflection = FunRpcObjectMessage_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::FunRpcMessage,
    ::google::protobuf::internal::MessageTypeTraits< ::FunRpcErrorMessage >, 11, false >
  error(kErrorFieldNumber, ::FunRpcErrorMessage::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::FunRpcMessage,
    ::google::protobuf::internal::MessageTypeTraits< ::FunRpcPingMessage >, 11, false >
  ping(kPingFieldNumber, ::FunRpcPingMessage::default_instance());

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
